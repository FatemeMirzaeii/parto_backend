{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nexport default function SigninFetch(_x, _x2, _x3) {\n  return _SigninFetch.apply(this, arguments);\n}\n_c2 = SigninFetch;\n\nfunction _SigninFetch() {\n  _SigninFetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(email, phone, pass) {\n    var options, url, response, status, tokenId, userId, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                email: email,\n                phone: phone,\n                password: pass\n              })\n            };\n            url = \"https://api.partobanoo.com/auth/signIn/fa\";\n            _context.prev = 2;\n            _context.next = 5;\n            return fetch(url, options);\n\n          case 5:\n            response = _context.sent;\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](2);\n            return _context.abrupt(\"return\", {\n              status: 500\n            });\n\n          case 11:\n            status = response.status;\n\n            if (!(status === 200)) {\n              _context.next = 18;\n              break;\n            }\n\n            tokenId = response.headers.get(\"x-auth-token\");\n            _context.next = 16;\n            return response.json();\n\n          case 16:\n            json = _context.sent;\n            userId = json.data.id; // console.log(userId + \" \" +tokenId)\n\n          case 18:\n            return _context.abrupt(\"return\", {\n              status: status,\n              tokenId: tokenId,\n              userId: userId\n            });\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 8]]);\n  }));\n  return _SigninFetch.apply(this, arguments);\n}\n\n_c = SigninFetch;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SigninFetch\");\n$RefreshReg$(_c2, \"SigninFetch\");","map":{"version":3,"sources":["E:/Parto/Main/partoBackend/parto_backend/component/backend/SigninFetch.js"],"names":["SigninFetch","email","phone","pass","options","method","headers","body","JSON","stringify","password","url","fetch","response","status","tokenId","get","json","userId","data","id"],"mappings":";;AAAA,wBAA8BA,WAA9B;AAAA;AAAA;MAA8BA,W;;;0EAAf,iBAA2BC,KAA3B,EAAkCC,KAAlC,EAAyCC,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,YAAAA,OAFO,GAEG;AACdC,cAAAA,MAAM,EAAE,MADM;AAEdC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFK;AAKdC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBR,gBAAAA,KAAK,EAAEA,KADY;AAEnBC,gBAAAA,KAAK,EAAEA,KAFY;AAGnBQ,gBAAAA,QAAQ,EAAEP;AAHS,eAAf;AALQ,aAFH;AAaPQ,YAAAA,GAbO,GAaD,2CAbC;AAAA;AAAA;AAAA,mBAgBMC,KAAK,CAACD,GAAD,EAAMP,OAAN,CAhBX;;AAAA;AAgBXS,YAAAA,QAhBW;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,6CAkBJ;AAAEC,cAAAA,MAAM,EAAE;AAAV,aAlBI;;AAAA;AAqBTA,YAAAA,MArBS,GAqBAD,QAAQ,CAACC,MArBT;;AAAA,kBAwBTA,MAAM,KAAK,GAxBF;AAAA;AAAA;AAAA;;AAyBXC,YAAAA,OAAO,GAAGF,QAAQ,CAACP,OAAT,CAAiBU,GAAjB,CAAqB,cAArB,CAAV;AAzBW;AAAA,mBA0BMH,QAAQ,CAACI,IAAT,EA1BN;;AAAA;AA0BPA,YAAAA,IA1BO;AA2BXC,YAAAA,MAAM,GAAGD,IAAI,CAACE,IAAL,CAAUC,EAAnB,CA3BW,CA4BX;;AA5BW;AAAA,6CA+BN;AAAEN,cAAAA,MAAM,EAAEA,MAAV;AAAkBC,cAAAA,OAAO,EAAEA,OAA3B;AAAoCG,cAAAA,MAAM,EAAEA;AAA5C,aA/BM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;KAAelB,W","sourcesContent":["export default async function SigninFetch(email, phone, pass) {\r\n  \r\n  const options = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      email: email,\r\n      phone: phone,\r\n      password: pass,\r\n    }),\r\n  };\r\n  const url = \"https://api.partobanoo.com/auth/signIn/fa\";\r\n  var response;\r\n  try {\r\n    response = await fetch(url, options);\r\n  } catch {\r\n    return { status: 500 };\r\n  }\r\n\r\n  var status = response.status;\r\n  var tokenId;\r\n  var userId;\r\n  if (status === 200) {\r\n    tokenId = response.headers.get(\"x-auth-token\");\r\n    var json = await response.json();\r\n    userId = json.data.id\r\n    // console.log(userId + \" \" +tokenId)\r\n  }\r\n\r\n  return { status: status, tokenId: tokenId, userId: userId };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}